Prerequisites

MySQL Database setup:

CREATE DATABASE JavaDB;
USE JavaDB;

CREATE TABLE Employee(
    EmpID INT PRIMARY KEY,
    Name VARCHAR(50),
    Salary DOUBLE
);

CREATE TABLE Product(
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Price DOUBLE,
    Quantity INT
);

CREATE TABLE Student(
    StudentID INT PRIMARY KEY,
    Name VARCHAR(50),
    Department VARCHAR(50),
    Marks DOUBLE
);


Include MySQL JDBC driver in your project (mysql-connector-java-x.x.x.jar).

Part A: Connecting to MySQL and Fetching Data
import java.sql.*;

public class FetchEmployeeData {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/JavaDB";
        String username = "root"; // your MySQL username
        String password = "password"; // your MySQL password

        try (Connection con = DriverManager.getConnection(url, username, password);
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM Employee")) {

            System.out.println("EmpID\tName\tSalary");
            while (rs.next()) {
                System.out.println(rs.getInt("EmpID") + "\t" +
                                   rs.getString("Name") + "\t" +
                                   rs.getDouble("Salary"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

Part B: CRUD Operations on Product Table (Menu-Driven)
import java.sql.*;
import java.util.Scanner;

public class ProductCRUD {
    private static final String URL = "jdbc:mysql://localhost:3306/JavaDB";
    private static final String USER = "root";
    private static final String PASS = "password";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        try (Connection con = DriverManager.getConnection(URL, USER, PASS)) {
            con.setAutoCommit(false); // Transaction handling
            while (true) {
                System.out.println("\n1. Create 2. Read 3. Update 4. Delete 5. Exit");
                System.out.print("Choose option: ");
                int choice = sc.nextInt();
                switch (choice) {
                    case 1 -> createProduct(con, sc);
                    case 2 -> readProducts(con);
                    case 3 -> updateProduct(con, sc);
                    case 4 -> deleteProduct(con, sc);
                    case 5 -> {
                        con.commit();
                        return;
                    }
                    default -> System.out.println("Invalid option!");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void createProduct(Connection con, Scanner sc) throws SQLException {
        System.out.print("Enter ProductID, Name, Price, Quantity: ");
        int id = sc.nextInt(); sc.nextLine();
        String name = sc.nextLine();
        double price = sc.nextDouble();
        int qty = sc.nextInt();

        String sql = "INSERT INTO Product(ProductID, ProductName, Price, Quantity) VALUES(?,?,?,?)";
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.setString(2, name);
            ps.setDouble(3, price);
            ps.setInt(4, qty);
            ps.executeUpdate();
            con.commit();
            System.out.println("Product added successfully!");
        } catch (SQLException e) {
            con.rollback();
            e.printStackTrace();
        }
    }

    private static void readProducts(Connection con) throws SQLException {
        String sql = "SELECT * FROM Product";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            System.out.println("ID\tName\tPrice\tQty");
            while (rs.next()) {
                System.out.println(rs.getInt("ProductID") + "\t" +
                                   rs.getString("ProductName") + "\t" +
                                   rs.getDouble("Price") + "\t" +
                                   rs.getInt("Quantity"));
            }
        }
    }

    private static void updateProduct(Connection con, Scanner sc) throws SQLException {
        System.out.print("Enter ProductID to update: ");
        int id = sc.nextInt(); sc.nextLine();
        System.out.print("Enter new Name, Price, Quantity: ");
        String name = sc.nextLine();
        double price = sc.nextDouble();
        int qty = sc.nextInt();

        String sql = "UPDATE Product SET ProductName=?, Price=?, Quantity=? WHERE ProductID=?";
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, name);
            ps.setDouble(2, price);
            ps.setInt(3, qty);
            ps.setInt(4, id);
            ps.executeUpdate();
            con.commit();
            System.out.println("Product updated successfully!");
        } catch (SQLException e) {
            con.rollback();
            e.printStackTrace();
        }
    }

    private static void deleteProduct(Connection con, Scanner sc) throws SQLException {
        System.out.print("Enter ProductID to delete: ");
        int id = sc.nextInt();

        String sql = "DELETE FROM Product WHERE ProductID=?";
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.executeUpdate();
            con.commit();
            System.out.println("Product deleted successfully!");
        } catch (SQLException e) {
            con.rollback();
            e.printStackTrace();
        }
    }
}

Part C: Student Management Application Using MVC and JDBC
Model: Student.java
public class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getMarks() { return marks; }

    @Override
    public String toString() {
        return studentID + " | " + name + " | " + department + " | " + marks;
    }
}

Controller: StudentDAO.java
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentDAO {
    private static final String URL = "jdbc:mysql://localhost:3306/JavaDB";
    private static final String USER = "root";
    private static final String PASS = "password";

    public Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASS);
    }

    public void addStudent(Student s) {
        String sql = "INSERT INTO Student(StudentID, Name, Department, Marks) VALUES(?,?,?,?)";
        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, s.getStudentID());
            ps.setString(2, s.getName());
            ps.setString(3, s.getDepartment());
            ps.setDouble(4, s.getMarks());
            ps.executeUpdate();
            System.out.println("Student added successfully!");
        } catch (SQLException e) { e.printStackTrace(); }
    }

    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Student";
        try (Connection con = getConnection(); Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                students.add(new Student(rs.getInt("StudentID"),
                                         rs.getString("Name"),
                                         rs.getString("Department"),
                                         rs.getDouble("Marks")));
            }
        } catch (SQLException e) { e.printStackTrace(); }
        return students;
    }

    public void updateStudent(Student s) {
        String sql = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, s.getName());
            ps.setString(2, s.getDepartment());
            ps.setDouble(3, s.getMarks());
            ps.setInt(4, s.getStudentID());
            ps.executeUpdate();
            System.out.println("Student updated successfully!");
        } catch (SQLException e) { e.printStackTrace(); }
    }

    public void deleteStudent(int id) {
        String sql = "DELETE FROM Student WHERE StudentID=?";
        try (Connection con = getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, id);
            ps.executeUpdate();
            System.out.println("Student deleted successfully!");
        } catch (SQLException e) { e.printStackTrace(); }
    }
}

View: StudentManagementApp.java
import java.util.List;
import java.util.Scanner;

public class StudentManagementApp {
    public static void main(String[] args) {
        StudentDAO dao = new StudentDAO();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n1.Add 2.View 3.Update 4.Delete 5.Exit");
            System.out.print("Choose option: ");
            int choice = sc.nextInt(); sc.nextLine();

            switch (choice) {
                case 1 -> {
                    System.out.print("Enter ID, Name, Department, Marks: ");
                    int id = sc.nextInt(); sc.nextLine();
                    String name = sc.nextLine();
                    String dept = sc.nextLine();
                    double marks = sc.nextDouble();
                    dao.addStudent(new Student(id, name, dept, marks));
                }
                case 2 -> {
                    List<Student> students = dao.getAllStudents();
                    students.forEach(System.out::println);
                }
                case 3 -> {
                    System.out.print("Enter ID to update: ");
                    int id = sc.nextInt(); sc.nextLine();
                    System.out.print("Enter new Name, Department, Marks: ");
                    String name = sc.nextLine();
                    String dept = sc.nextLine();
                    double marks = sc.nextDouble();
                    dao.updateStudent(new Student(id, name, dept, marks));
                }
                case 4 -> {
                    System.out.print("Enter ID to delete: ");
                    int id = sc.nextInt();
                    dao.deleteStudent(id);
                }
                case 5 -> {
                    System.out.println("Exiting...");
                    return;
                }
                default -> System.out.println("Invalid option!");
            }
        }
    }
}
