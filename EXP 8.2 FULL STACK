const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for signing JWTs
const SECRET_KEY = "mysecretkey";

// Dummy user for authentication
const user = {
  id: 1,
  username: "testuser",
  password: "password123",
};


app.post("/login", (req, res) => {
  const { username, password } = req.body;

  if (username === user.username && password === user.password) {
    // Create token payload
    const payload = { id: user.id, username: user.username };

    // Sign token with 1-hour expiry
    const token = jwt.sign(payload, SECRET_KEY, { expiresIn: "1h" });

    res.status(200).json({ token });
  } else {
    res.status(401).json({ message: "Invalid credentials" });
  }
});

function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];

  if (!authHeader) {
    return res.status(401).json({ message: "No token provided" });
  }

  const token = authHeader.split(" ")[1]; // Expecting format: Bearer <token>

  if (!token) {
    return res.status(401).json({ message: "Missing token" });
  }

  jwt.verify(token, SECRET_KEY, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: "Invalid token" });
    }
    req.user = decoded; // attach decoded user info
    next();
  });
}
app.get("/protected", verifyToken, (req, res) => {
  res.status(200).json({
    message: `Welcome, ${req.user.username}! Access granted.`,
  });
});


app.listen(3000, () => {
  console.log("âœ… Server running on http://localhost:3000");
});
