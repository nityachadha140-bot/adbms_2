const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for signing JWT (in real projects, keep this in .env)
const JWT_SECRET = "supersecretkey";

// Hardcoded user credentials (for this practice)
const USER = {
  username: "user1",
  password: "password123",
};

// In-memory account balance (simulated database)
let balance = 1000;
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  // Validate credentials
  if (username === USER.username && password === USER.password) {
    // Generate JWT Token
    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: "1h" });
    return res.status(200).json({ token });
  } else {
    return res.status(401).json({ message: "Invalid username or password" });
  }
});

// ===============================
//  AUTH MIDDLEWARE
// ===============================
function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1]; // Bearer TOKEN

  if (!token) {
    return res.status(403).json({ message: "Token missing" });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ message: "Invalid or expired token" });
    }
    req.user = user; // Save user info for future use
    next();
  });
}
// Get account balance
app.get("/balance", authenticateToken, (req, res) => {
  res.status(200).json({ balance });
});

// Deposit money
app.post("/deposit", authenticateToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) {
    return res.status(400).json({ message: "Invalid deposit amount" });
  }
  balance += amount;
  res.status(200).json({
    message: `Deposited $${amount}`,
    newBalance: balance,
  });
});

// Withdraw money
app.post("/withdraw", authenticateToken, (req, res) => {
  const { amount } = req.body;
  if (!amount || amount <= 0) {
    return res.status(400).json({ message: "Invalid withdrawal amount" });
  }
  if (amount > balance) {
    return res.status(400).json({ message: "Insufficient balance" });
  }
  balance -= amount;
  res.status(200).json({
    message: `Withdrew $${amount}`,
    newBalance: balance,
  });
});

//  START SERVER
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});
