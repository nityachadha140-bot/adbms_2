
import java.io.*;
import java.util.*;--
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int studentID;
    String name;
    String grade;

    public Student(int studentID, String name, String grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    public void display() {
        System.out.println("Student ID: " + studentID);
        System.out.println("Name: " + name);
        System.out.println("Grade: " + grade);
    }
}


class Employee {
    int id;
    String name;
    String designation;
    double salary;

    public Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return id + "," + name + "," + designation + "," + salary;
    }

    public static Employee fromString(String line) {
        String[] parts = line.split(",");
        return new Employee(
                Integer.parseInt(parts[0]),
                parts[1],
                parts[2],
                Double.parseDouble(parts[3]));
    }
}

// ---------- Main Program with Menu ----------
public class NimbusTasks {
    private static final String STUDENT_FILE = "student.dat";
    private static final String EMPLOYEE_FILE = "employees.txt";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n======= Nimbus Java Tasks =======");
            System.out.println("1. Sum of Integers (Autoboxing/Unboxing)");
            System.out.println("2. Serialize and Deserialize Student");
            System.out.println("3. Employee Management System (File Handling)");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> sumOfIntegers(sc);
                case 2 -> studentSerialization(sc);
                case 3 -> employeeManagement(sc);
                case 4 -> System.out.println("Exiting program... Goodbye!");
                default -> System.out.println("Invalid choice, try again.");
            }
        } while (choice != 4);

        sc.close();
    }

    // ---------- Part A: Sum of Integers ----------
    private static void sumOfIntegers(Scanner sc) {
        ArrayList<Integer> numbers = new ArrayList<>();
        System.out.println("Enter integers (type 'done' to stop):");

        while (true) {
            String input = sc.next();
            if (input.equalsIgnoreCase("done")) break;
            try {
                int num = Integer.parseInt(input); // String → int
                numbers.add(num); // Autoboxing (int → Integer)
            } catch (NumberFormatException e) {
                System.out.println("Invalid input, enter integers only.");
            }
        }

        int sum = 0;
        for (Integer val : numbers) { // Unboxing (Integer → int)
            sum += val;
        }
        System.out.println("Sum of entered integers: " + sum);
    }

    // ---------- Part B: Student Serialization ----------
    private static void studentSerialization(Scanner sc) {
        try {
            System.out.print("Enter Student ID: ");
            int id = sc.nextInt();
            sc.nextLine(); // consume newline
            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Grade: ");
            String grade = sc.nextLine();

            // Serialize Student
            try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(STUDENT_FILE))) {
                Student s1 = new Student(id, name, grade);
                out.writeObject(s1);
                System.out.println("Student serialized successfully!");
            }

            // Deserialize Student
            try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(STUDENT_FILE))) {
                Student s2 = (Student) in.readObject();
                System.out.println("\nDeserialized Student:");
                s2.display();
            }

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    // ---------- Part C: Employee Management ----------
    private static void employeeManagement(Scanner sc) {
        int choice;
        do {
            System.out.println("\n--- Employee Management Menu ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Back to Main Menu");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> addEmployee(sc);
                case 2 -> displayEmployees();
                case 3 -> System.out.println("Returning to main menu...");
                default -> System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 3);
    }

    private static void addEmployee(Scanner sc) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(EMPLOYEE_FILE, true))) {
            System.out.print("Enter Employee ID: ");
            int id = sc.nextInt();
            sc.nextLine();
            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Designation: ");
            String designation = sc.nextLine();
            System.out.print("Enter Salary: ");
            double salary = sc.nextDouble();

            Employee emp = new Employee(id, name, designation, salary);
            bw.write(emp.toString());
            bw.newLine();
            System.out.println("Employee added successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void displayEmployees() {
        try (BufferedReader br = new BufferedReader(new FileReader(EMPLOYEE_FILE))) {
            String line;
            System.out.println("\n--- Employee Records ---");
            while ((line = br.readLine()) != null) {
                Employee emp = Employee.fromString(line);
                System.out.println("ID: " + emp.id + ", Name: " + emp.name +
                        ", Designation: " + emp.designation + ", Salary: " + emp.salary);
            }
        } catch (FileNotFoundException e) {
            System.out.println("No employee records found.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


